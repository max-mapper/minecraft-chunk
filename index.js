var blockInfo = require('minecraft-blockinfo')

// Generated by CoffeeScript 1.6.2
var ChunkSizeX, ChunkSizeY, ChunkSizeZ, ChunkView, calcOpts, calcPoint, cubeCount, times, typeToCoords, typeToCoords2,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

ChunkSizeY = 256;
ChunkSizeZ = 16;
ChunkSizeX = 16;
cubeCount = 0;
calcOpts = {};
times = 0;

calcPoint = function(pos, opts) {
  var verts;

  verts = [];
  verts.push(pos[0] + opts.chunkX * 16 * 1.00000);
  verts.push((pos[1] + 1) * 1.0);
  verts.push(pos[2] + opts.chunkZ * 16 * 1.00000);
  return verts;
};

typeToCoords = function(type) {
  var s, x, y;

  if (type.t != null) {
    x = type.t[0];
    y = 15 - type.t[1];
    s = 0.0085;
    return [x / 16.0 + s, y / 16.0 + s, (x + 1.0) / 16.0 - s, y / 16.0 + s, (x + 1.0) / 16.0 - s, (y + 1.0) / 16.0 - s, x / 16.0 + s, (y + 1.0) / 16.0 - s];
  } else {
    return [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
  }
};

typeToCoords2 = function(type) {
  var s, x, y;

  if (type.t != null) {
    x = type.t[0];
    y = 15 - type.t[1];
    s = 0.0085;
    return [x / 16.0 + s, y / 16.0 + s, (x + 1.0) / 16.0 - s, y / 16.0 + s, (x + 1.0) / 16.0 - s, (y + 1.0) / 16.0 - s, x / 16.0 + s, y / 16.0 + s, (x + 1.0) / 16.0 - s, (y + 1.0) / 16.0 - s, x / 16.0 + s, (y + 1.0) / 16.0 - s];
  } else {
    return [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0];
  }
};

ChunkView = (function() {
  function ChunkView(options) {
    this.options = options;
    this.getBlockAt = __bind(this.getBlockAt, this);
    this.getSectionInfo = __bind(this.getSectionInfo, this);
    this.extractChunk = __bind(this.extractChunk, this);
    this.extractVoxel = __bind(this.extractVoxel, this);
    this.transNeighbors = __bind(this.transNeighbors, this);
    this.getBlockInfo = __bind(this.getBlockInfo, this);
    this.index = 0;
    this.nbt = options.nbt;
    this.pos = options.pos;
    this.torches = [];
    this.unknown = [];
    this.notexture = [];
    this.rotcent = true;
    this.filled = [];
    this.nomatch = {};
    this.special = {};
    if (this.options.ymin != null) {
      this.ymin = this.options.ymin;
    } else {
      this.ymin = 60;
    }
    if ((this.options.superflat != null) === 'true') {
      this.options.superflat = true;
    }
    if (this.options.superflat != null) {
      this.superflat = this.options.superflat;
    } else {
      this.superflat = false;
    }
    if (this.options.showstuff != null) {
      this.showStuff = this.options.showstuff;
    } else {
      this.showStuff = 'diamondsmoss';
    }
    if (options.ymin != null) {
      this.ymin = options.ymin;
    }
  }
  
  ChunkView.prototype.getPosition = function() {
    return [this.nbt.root.Level.xPos, this.nbt.root.Level.yPos]
  }

  ChunkView.prototype.getBlockAt = function(x, y, z) {
    var blockpos, offset, section, sectionnum, sections, _i, _len, _ref;

    if (((_ref = this.nbt.root) != null ? _ref.Level.Sections : void 0) != null) {
      sections = this.nbt.root.Level.Sections;
    } else {
      sections = this.nbt.root.Sections;
    }
    if (!sections) {
      return -1;
    }
    sectionnum = Math.floor(y / 16);
    offset = ((y % 16) * 256) + (z * 16) + x;
    blockpos = offset;
    for (_i = 0, _len = sections.length; _i < _len; _i++) {
      section = sections[_i];
      if (section !== void 0 && section.Y * 1 === sectionnum * 1) {
        return section.Blocks[blockpos];
      }
    }
    return -1;
  };

  ChunkView.prototype.transNeighbors = function(x, y, z) {
    var blockID, i, j, k, _i, _j, _k, _ref, _ref1, _ref2, _ref3, _ref4, _ref5;

    for (i = _i = _ref = x - 1, _ref1 = x + 1; _ref <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
      if (i >= ChunkSizeX) {
        continue;
      }
      for (j = _j = _ref2 = y - 1, _ref3 = y + 1; _ref2 <= _ref3 ? _j <= _ref3 : _j >= _ref3; j = _ref2 <= _ref3 ? ++_j : --_j) {
        for (k = _k = _ref4 = z - 1, _ref5 = z + 1; _ref4 <= _ref5 ? _k <= _ref5 : _k >= _ref5; k = _ref4 <= _ref5 ? ++_k : --_k) {
          if (k >= ChunkSizeZ) {
            continue;
          }
          if (!(i === x && j === y && k === z)) {
            blockID = this.getBlockAt(i, j, k);
            if (blockID === 0 || blockID === -1) {
              return true;
            }
          }
        }
      }
    }
    return false;
  };

  ChunkView.prototype.extractChunk = function(cb) {
    this.textcoords = [];
    this.cubeCount = 0;
    if (this.nbt.root.Level.Sections != null) {
      var sections = this.nbt.root.Level.Sections;
    } else {
      var sections = this.nbt.root.Sections;
    }
    if (!sections) return
    for (var i = 0, len = sections.length; i < len; i++) {
      var section = sections[i];
      if (section !== void 0) {
        var Y = section.Y * 1
        var ymin = Y * 16
        var xmin = 0
        var zmin = 0
        var ymax = Y * 16 + 15
        var xmax = ChunkSizeX - 1
        var zmax = ChunkSizeZ - 1
        var x, y, z, _i, _j, _k, _l, _len, _ref, _ref1, _ref2, _ref3
        for (y = _j = _ref = ymin, _ref1 = ymax; _ref <= _ref1 ? _j <= _ref1 : _j >= _ref1; y = _ref <= _ref1 ? ++_j : --_j) {
          for (x = _k = xmin, _ref2 = xmax; 0 <= _ref2 ? _k <= _ref2 : _k >= _ref2; x = 0 <= _ref2 ? ++_k : --_k) {
            for (z = _l = zmin, _ref3 = zmax; 0 <= _ref3 ? _l <= _ref3 : _l >= _ref3; z = 0 <= _ref3 ? ++_l : --_l) {
              if (y < this.ymin) {
                continue;
              }
              this.extractVoxel(section, x, y, z, cb)
            }
          }
        }
      }
    }
  };
  
  ChunkView.prototype.extractVoxel = function(section, x, y, z, cb) {
    var offset = ((y % 16) * 256) + (z * 16) + x;
    var id = section.Blocks[offset];
    var blockType = blockInfo.blocks['_' + id];
    if (blockType == null) {
      id = -1;
    }
    var show = false;
    show = id > 0;
    if (!this.superflat && y < 60 && this.showStuff === 'diamondsmoss') {
      show = id === 48 || id === 56 || id === 4 || id === 52;
    } else {
      if (id !== 0 && id !== -1 && id !== -10) {
        show = this.transNeighbors(x, y, z);
      } else {
        show = false;
      }
    }
    if (show) {
      var block = this.getBlockInfo(x, y, z);
      if (block.type === 'colored_wool') {
        var meta = this.getSectionInfo('Data', x, y, z)
        block.type = block.data[meta]
      }
      cb(x, y, z, block);
    } else {
      var blah = 1;
    }
  }
  
  ChunkView.prototype.getSectionInfo = function(info, x, y, z) {
    var offset, section, sectionnum, sections, _i, _len;
    if (this.nbt.root.Level.Sections != null) {
      sections = this.nbt.root.Level.Sections;
    } else {
      sections = this.nbt.root.Sections;
    }
    if (!sections) return -1;
    sectionnum = Math.floor(y / 16);
    offset = ((y % 16) * 256) + (z * 16) + x;
    for (_i = 0, _len = sections.length; _i < _len; _i++) {
      section = sections[_i];
      if (section !== void 0 && section.Y * 1 === sectionnum * 1) {
        if (offset % 2 === 0) {
          return section[info][Math.floor(offset / 2)] & 0x0F;
        } else {
          return (section[info][Math.floor(offset / 2)] >> 4) & 0x0F;
        }
      }
    }
    return -1;
  };

  ChunkView.prototype.getBlockInfo = function(x, y, z) {
    var blockID, blockType, id;

    blockType = blockInfo.blocks["_-1"];
    id = this.getBlockAt(x, y, z);
    blockID = "_-1";
    if (id != null) {
      blockID = "_" + id.toString();
    }
    if (blockInfo.blocks[blockID] != null) {
      return blockInfo.blocks[blockID];
    } else {
      return blockInfo.blocks["_-1"];
    }
  };


  return ChunkView;

})();

module.exports = function(options) {
  return new ChunkView(options)
}

module.exports.calcPoint = calcPoint;

module.exports.typeToCoords = typeToCoords;

